snippet		main
options		head
abbr		fn main() {}
	fn main() {
		${0:#:body}
	}

snippet		main_result
options		head
abbr		fn main() -> Result
	fn main() -> Result<(), ${1:#:ERROR}> {
		${0:#:body}
	}

snippet		fn_void
options		head
abbr		fn () {}
	fn ${1:#:name}(${2:#:args}) {
		${0:#:body}
	}

snippet		fn
options		head
abbr		fn () {}
	fn ${1:#:name}(${2:#:args}) -> ${3:#:ret} {
		${0:#:body}
	}

snippet		println
abbr		println!("", )
	println!("${1}", ${2})

snippet		println_debug
abbr		println!("", v)
	println!("DEBUG: ${1:#:var}: {:?}", $1);

snippet		mod
abbr		mod {}
options		head
	mod ${1:#:name} {
		${0:#:body}
	} // mod $1

snippet		match
	match ${1:#:expr} {
		${2:#:pattern} => ${0:#:body},
	}

snippet		match_ok_err
abbr		match {Ok(), Err()}
	match ${1:#:expr} {
		Ok(${2}) => ${3:#:body_ok},
		Err(${4}) => ${5:#:body_err},
	}

snippet		match_some_none
abbr		match {Ok(), Err()}
	match ${1:#:expr} {
		Some(${2}) => ${3:#:body_ok},
		None => ${4:#:body_err},
	}

snippet		derive
options		head
abbr		#[derive()]
	#[derive(${1:Debug})]${0}

snippet		cfg
abbr		#[cfg()]
options		head
	#[cfg(${1:test})]${0}

snippet		if_oneline
abbr		if {} else {}
	if ${1:#:cond} { ${2} } else { ${3} }

snippet		test_fn
options		head
abbr		test fn ()
	#[test]
	fn ${1:#:testcase}() {
		${0:#:BODY}
	}

snippet		should_panic
options		head
abbr		#[should_panic]
	#[should_panic(expected = "${1:#:message}")]${0}

snippet		macro_rules
options		head
abbr		macro_rules! {}
	macro_rules! ${1:#:name} {
		(${2:#:pattern}) => {
			${0:#:BODY}
		}
	}

snippet		impl_where
options		head
abbr		impl where {}
	impl<${1:T}> ${2:#:type}<${3:T}>
	where ${4:#:traits} {
		${0:#:BODY}
	}

snippet		impl_for
options		head
abbr		impl for {}
	impl<${1:T}> ${2:#:Trait} for ${3:#:Type} {
		${0:#:BODY}
	}

snippet		struct_derive
options		head
abbr		#[derive()] struct {}
	#[derive(${1:Debug})]
	struct ${0:#:NAME} {
		${0:#:BODY}
	}

snippet		enum_derive
options		head
abbr		#[derive()] enum {}
	#[derive(${1:Debug})]
	enum ${0:#:NAME} {
		${0:#:BODY}
	}
