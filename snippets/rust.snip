snippet		main
options		head
alias		fn_main
abbr		fn main() {}
	fn main() {
		${0:#:body}
	}

snippet		main_result
options		head
alias		fn_main_result
abbr		fn main() -> Result
	fn main() -> Result<(), ${1:#:ERROR}> {
		${0:#:body}
	}

snippet		main_io_result
options		head
alias		fn_main_io_result
abbr		fn main() {}
	fn main() -> io::Result<()> {
		${0:#:body}
	}

snippet		println
abbr		println!("", )
	println!("${1}", ${2});

snippet		mod
abbr		mod {}
options		head
	mod ${1:#:name} {
		${0:#:body}
	} // mod $1

snippet		mod_test
abbr		mod test {}
options		head
	#[cfg(test)]
	mod tests {
		use super::*;
	
		#[test]
		fn ${1:#:name} {
			${0:#:BODY}
		}
	} // mod tests

snippet		match
	match ${1:#:expr} {
		${2:#:pattern} => ${0:#:body},
	}

snippet		derive_attr
options		head
abbr		#[derive()]
	#[derive(${1:Debug})]${0}

snippet		cfg_attr
abbr		#[cfg()]
options		head
	#[cfg(${1:test})]${0}

snippet		if_oneline
abbr		if {} else {}
	if ${1:#:cond} { ${2} } else { ${3} }

snippet		test_fn
options		head
alias		fn_test
abbr		test fn ()
	#[test]
	fn ${1:#:testcase}() {
		${0:#:BODY}
	}

snippet		should_panic
options		head
abbr		#[should_panic]
	#[should_panic(expected = "${1:#:message}")]${0}

snippet		macro_rules
options		head
abbr		macro_rules! {}
	macro_rules! ${1:#:name} {
		(${2:#:pattern}) => {
			${0:#:BODY}
		}
	}

snippet		struct_derive
options		head
abbr		#[derive()] struct {}
	#[derive(${1:Debug})]
	struct ${2:#:NAME} {
		${0:#:BODY}
	}

snippet		enum_derive
options		head
abbr		#[derive()] enum {}
	#[derive(${1:Debug})]
	enum ${2:#:NAME} {
		${0:#:BODY}
	}
