delete      for
snippet     for
abbr        for(;;) {}
    for(${1}; ${2}; ${3}) {
        ${0}
    }

delete      template
snippet     template
abbr        template<>
    template<class ${0:T}>

delete      inc
snippet     inc
alias       #inc,#include
prev_word   '^'
abbr        #include <>
    #include <${1}>${0}

snippet     inc_boost
alias       #inc_boost,#include_boost
abbr        #include <boost/.hpp>
    #include <boost/${1}.hpp>${0}

delete      inc2
snippet     inc2
alias       #inc2,#include2
abbr        #include ".hpp"
    #include "${1}.hpp"${0}

snippet     cout
alias       std::cout
abbr        std::cout << "\n";
    std::cout << "${1}\n";
    ${0}

snippet     static_assert
abbr        static_assert(,"")
    static_assert( ${1}, "${2}" );${0}

snippet     decltype
abbr        decltype()
    decltype(${1})${0}

snippet     declval
abbr        declval()
    declval(${1})${0}

snippet     static_cast
abbr        static_cast<>()
    static_cast<${1}>(${2})${0}

snippet     reinterpret_cast
abbr        reinterpret_cast<>()
    reinterpret_cast<${1}>(${2})${0}

snippet     const_cast
abbr        const_cast<>()
    const_cast<${1}>(${2})${0}

snippet     dynamic_cast
abbr        dynamic_cast<>()
    dynamic_cast<${1}>(${2})${0}

snippet     iostream_inclusion
abbr        #include <iostream>
prev_word   '^'
    #include <iostream>${0}

snippet     vector_inclusion
abbr        #include <vector>
prev_word   '^'
    #include <vector>${0}

snippet     array_inclusion
abbr        #include <array>
prev_word   '^'
    #include <array>${0}

snippet     tuple_inclusion
abbr        #include <tuple>
prev_word   '^'
    #include <tuple>${0}

snippet     algorithm_inclusion
abbr        #include <algorithm>
prev_word   '^'
    #include <algorithm>${0}

snippet     memory_inclusion
abbr        #include <memory>
prev_word   '^'
    #include <memory>${0}

snippet     unordered_map_inclusion
abbr        #include <unordered_map>
prev_word   '^'
    #include <unordered_map>${0}

delete      string.h_inclusion
snippet     string
abbr        #include <string>
prev_word   '^'
    #include <string>${0}

snippet     cstddef_inclusion
abbr        #include <cstddef>
prev_word   '^'
    #include <cstddef>${0}

snippet     cstdio_inclusion
abbr        #include <cstdio>
prev_word   '^'
    #include <cstdio>${0}


snippet     optional_inclusion
abbr        #include <boost/optional.hpp>
prev_word   '^'
    #include <boost/optional.hpp>${0}

snippet     variant_inclusion
abbr        #include <boost/variant.hpp>
prev_word   '^'
    #include <boost/variant.hpp>${0}

delete      namespace
snippet     namespace
abbr        namespace {}
prev_word   '^'
    namespace ${1:name}
        ${0}
    } // namespace $1

snippet     using_common
abbr        using commonly
prev_word   '^'
    ${0}
    using std::cout;
    using std::endl;
    using std::begin;
    using std::end;
