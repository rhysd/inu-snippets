delete		for
snippet		for
abbr		for(;;) {}
	for(${1}; ${2}; ${3}) {
		${0}
	}

delete		template
snippet		template
abbr		template<>
	template<class ${0:T}>

delete		inc
delete		include
snippet		inc
alias		include,#inc,#include
options		head
abbr		#include <>
	#include <${1}>${0}

snippet		inc_boost
alias		#inc_boost,#include_boost
options		head
abbr		#include <boost/...>
	#include <boost/${1}>${0}

delete		inc2
snippet		inc2
alias		include2,#inc2,#include2
options		head
abbr		#include ".hpp"
	#include "${1}.hpp"${0}

delete		inc_h
snippet		inc_h
alias		include_h,#inc_h,#include_h
options		head
abbr		#include <.h>
	#include <${1}.h>${0}

delete		inc_h2
snippet		inc_h2
alias		include_h2,#inc_h2,#include_h2
options		head
abbr		#include ".h"
	#include "${1}.h"${0}

snippet		cout
abbr		cout << "\n";
	std::cout << ${1} << '\n';${0}

snippet		cerr
abbr		cerr << "\n";
	std::cerr << ${1} << '\n';${0}

snippet		static_assert
abbr		static_assert(,"")
	static_assert( ${1}, "${2}" );${0}

snippet		decltype
abbr		decltype()
	decltype(${1})${0}

snippet		declval
abbr		declval()
	declval<${1}>()${0}

# already included in neosnippet
#
# snippet		static_cast
# abbr		static_cast<>()
# 	static_cast<${1}>(${2})${0}
# 
# snippet		reinterpret_cast
# abbr		reinterpret_cast<>()
# 	reinterpret_cast<${1}>(${2})${0}
# 
# snippet		const_cast
# abbr		const_cast<>()
# 	const_cast<${1}>(${2})${0}
# 
# snippet		dynamic_cast
# abbr		dynamic_cast<>()
# 	dynamic_cast<${1}>(${2})${0}
# 
delete		namespace
snippet		namespace
abbr		namespace {}
options		head
	namespace ${1:name} {
	${0}
	} // namespace $1

snippet		constexpr_func
abbr		constexpr auto func() -> decltype
options		head
	constexpr auto ${1:name}( ${2:args} ) -> decltype($3)
	{
		return ${3:body};
	}

snippet		STATIC_ASSERT
abbr		STATIC_ASSERT((condition))
options		word
	STATIC_ASSERT((${1:condition}));${0}

snippet		STATIC_ASSERT_NOT
abbr		STATIC_ASSERT_NOT((condition))
options		word
	STATIC_ASSERT_NOT((${1:condition}));${0}

snippet		using_template_alias
abbr		template<> using
	template<${1:params}>
	using ${2:name} = ${0:body};

snippet		typename_type
abbr		typename <>::type
	typename ${1}<${0}>::type

delete		helloworld
