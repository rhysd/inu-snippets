include c.snip

delete		inc
delete		include
snippet		inc
alias		include,#inc,#include
options		head
abbr		#include <>
	#include <${1}>${0}

snippet		inc_boost
alias		#inc_boost,#include_boost
options		head
abbr		#include <boost/...>
	#include <boost/${1}>${0}

delete		inc2
snippet		inc2
alias		include2,#inc2,#include2
options		head
abbr		#include ".hpp"
	#include "${1}.hpp"${0}

snippet		cout_endl
abbr		cout << ... << endl;
	std::cout << ${1} << std::endl;
	${0}

snippet		cerr_endl
abbr		cerr << ... << endl;
	std::cerr << ${1} << std::endl;
	${0}

snippet		declval
abbr		declval()
	declval<${1}>()${0}

snippet		namespace
abbr		namespace {}
options		head
	namespace ${1:#:name} {
	${0}
	} // namespace $1

snippet		STATIC_ASSERT
abbr		STATIC_ASSERT((condition))
options		word
	STATIC_ASSERT((${1:#:condition}));${0}

snippet		STATIC_ASSERT_NOT
abbr		STATIC_ASSERT_NOT((condition))
options		word
	STATIC_ASSERT_NOT((${1:#:condition}));${0}

snippet		using_template_alias
abbr		template<> using
	template<${1:#:params}>
	using ${2:#:name} = ${0:#:body};

snippet		typename_type
abbr		typename <>::type
	typename ${1}<${0}>::type

snippet		for_range
abbr		for(auto const& : ){}
	for (${1:auto &&} ${2:#:item} : ${3:#:container}) {
		${0}
	}

snippet		static_assert_type
abbr		static_assert(...<...>::value, "...");
options		word
	static_assert(std::is_${1:same}<${2:#:types}>::value, "${3} is not $1");

snippet		static_assert_type_not
abbr		static_assert(...<...>::value, "...");
options		word
	static_assert(!std::is_${1:same}<${2:#:types}>::value, "${3} is $1");

snippet		static_assert
abbr		static_assert(,"")
	static_assert( ${1}, "$1" );${0}

snippet		begin_end
abbr		std::begin(...), std::end(...)
alias		std::begin_end
options		word
	std::begin(${1:#:container}), std::end($1)${0}

snippet		extern_C
abbr		extern "C" {}
	extern "C" {
	
	${0}
	
	} // extern "C"

snippet		enum_scoped
abbr		enum struct {}
	enum struct ${1:#:name} {
		${0:#:item} = 0,
	};

snippet		raw_string
abbr		R"()"
	R"(${1})"${0}

snippet		noexcept_noexcept
abbr		noexcept(noexcept())
	noexcept(noexcept(${0:#:expr}))

snippet		forward
options		word
abbr		forward<decltype()>()
	std::forward<decltype(${1:#:var})>($1)${0}

snippet		optional
options		head
abbr		auto maybe = ...
	auto ${1:const} maybe_${2:#:var_name} = ${3:#:initializer};
	assert(maybe_$2);
	auto $1& $2 = *maybe_$2;

snippet		debug_print
options		head
abbr		<< __func__ << ...
	std::cerr << __func__ << ": " << ${1:#:msg} << " (" __FILE__ ":" << __LINE__ << ')' << std::endl;${0}

