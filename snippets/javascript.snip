snippet	function
alias	func
abbr	funciton (){}
options word
	function ${1:#:name}(${2:#:params}) {
		${0:#:body}
	}

snippet console_log
abbr    console.log();
options word
	console.log(${0:#:args});

snippet console_log_stringify
abbr    console.log(JSON.stringify());
options word
	console.log(JSON.stringify(${0:#:arg}));

snippet	console_dump_var
abbr	console.log('foo', foo)
options	word
	console.log('${1:#:var_name}', $1)${0}

snippet	require
abbr	var = require();
options head
	var ${1:#:module} = require('$1');

snippet react_component
abbr	extends React.Component
options	head
	export default class ${1:#:name} extends React.Component {
		render() {
			return (
				${0}
			);
		}
	}
	
	$1.propTypes = {
	}

snippet	jsx
abbr	<foo><foo/>
	<${1:div} ${2:#:props}>
		${0}
	</$1>

snippet	for_of
abbr	for of ...
options	head
	for (let ${1:#:iter} of ${2:#:iterable}) {
		${0:#:BODY}
	}

snippet	for_in
abbr	for in ...
options	head
	for (let ${1:#:key} in ${2:#:iterable}) {
		${0:#:BODY}
	}

snippet	switch
abbr	switch(...){}
options	head
	switch (${1:#:expr}) {
		${0:#:BODY}
		default:
			break;
	}

snippet	case
abbr	case ...: {...}
options	head
	case ${1:#:value}: {
		${0:#:BODY}
		break;
	}

snippet	new_Promise
alias	Promise
abbr	new Promise(...)
	new Promise((resolve, reject) => {
		${0:#:BODY}
	});


snippet	describe
abbr	describe('', function())
options	head
	describe('${1:#:feature}', function() {
		${0:#:body}
	});

snippet	it
abbr	it('', function())
options	head
	it('${1:#:spec}', function() {
		${0:#:body}
	});

snippet	it_done
abbr	it('', function())
options	head
	it('${1:#:spec}', function(done) {
		${0:#:body}
	});

snippet	assert_strictEqual
abbr	assert.strictEqual()
alias	strictEqual
options	word
	assert.strictEqual(${1:#:actual}, ${2:#:expected});

snippet	assert_notStrictEqual
abbr	assert.notStrictEqual()
alias	notStrictEqual
options	word
	assert.notStrictEqual(${1:#:actual}, ${2:#:expected});

snippet	assert_deepEqual
abbr	assert.deepEqual()
alias	deepEqual
options	word
	assert.deepEqual(${1:#:actual}, ${2:#:expected});

snippet	assert_notDeepEqual
abbr	assert.notDeepEqual()
alias	notDeepEqual
options	word
	assert.notDeepEqual(${1:#:actual}, ${2:#:expected});

snippet	assert_isTrue
abbr	assert.isTrue(, '')
options	word
	assert.isTrue(${1:#:actual}, '${2:#:msg}');

snippet	assert_isFalse
abbr	assert.isFalse(, '')
options	word
	assert.isFalse(${1:#:actual}, '${2:#:msg}');

snippet	eslint_disable_comment
abbr	/* eslint-disable */
options	head
	/* eslint-disable ${1:#:comma-sep-rules} */
	${0:#:BODY}
	/* eslint-enable $1 */
