snippet import_require
abbr    import = require('');
options head
	import ${1} = require('$1');

snippet import
abbr    import {...} from '...'
options head
	import ${1:#:modules} from '${2:#:module}';

snippet constructor
abbr    constructor(){}
options head
	constructor(${1:#:params}) {
		${2:#:body}
	}

snippet log_stringify
abbr    console.log(stringify())
options word
	console.log(JSON.stringify(${1}, null, 2));

snippet reference
abbr    /// <reference .../>
	/// <reference path="${1}" />

snippet function
abbr    function () {}
	function ${1:#:name} (${2:#:params}) {
		${3:#:body}
	}

snippet function_arrow
abbr    () => {}
	(${1:#:params}) => {
		${2:#:body}
	}

snippet	for_of
abbr	for of ...
options	head
	for (const ${1:#:iter} of ${2:#:iterable}) {
		${0:#:BODY}
	}

snippet	for_in
abbr	for in ...
options	head
	for (const ${1:#:key} in ${2:#:iterable}) {
		${0:#:BODY}
	}

snippet	switch
abbr	switch(...){}
options	head
	switch (${1:#:expr}) {
		${0:#:BODY}
		default:
			break;
	}

snippet	case
abbr	case ...: {...}
options	head
	case ${1:#:value}: {
		${0:#:BODY}
		break;
	}

snippet	export_function
abbr	export function(){}
options	head
	export function ${1:#:name}() {
		'use strict';
		${0:#:BODY}
	}

snippet	doc_comment
abbr	/* * */
options	head
	/**
	 *  ${0:#:doc}
	 */

snippet	new_Promise
alias	Promise
abbr	new Promise(...)
	new Promise<${1:#:T}>((resolve, reject) => {
		${0:#:BODY}
	});

snippet	namespace
abbr	namespace {}
options head
	namespace ${1:#:name} {
		${0:#:BODY}
	} // $1

snippet	react_stateless_component
abbr	const C = props => ()
options head
	import * as React from 'react';
	
	interface ${1:#:Component}Props extends React.Props<any> {
		${2:#:props}
	}
	
	const $1 = (props: $1Props) => (
		${0:#:BODY}
	);
	export default $1;

snippet	react_component_class
abbr	React.Component
options	head
	import * as React from 'react';
	
	interface ${1:#:Component}Props extends React.Props<$1> {
		${2:#:props}
	}
	
	export default class $1 extends React.Component<${$1Props, ${2:{\}}> {
		render() {
			return (
				${0}
			);
		}
	}

