snippet		func
options		head
abbr		func() end
	func ${1:#:name}${2:#:param}
		${0}
	end

snippet		proc
options		head
abbr		proc() end
	proc ${1:#:name}${2:#:param}
		${0}
	end

snippet		case
options		head
abbr		case ... end
	case ${1:#:var}
	when ${2:#:cond}
		${3:#:body}
	else
		${4:#:else}
	end

snippet		when
options		head
abbr		when ...
	when ${1:#:cond}
		${2:#:body}

snippet		if
options		head
abbr		if ... end
	if ${1:#:cond}
		${0:#:body}
	end

snippet		else
abbr		else ...
	else
		${0:#:body}

snippet		elseif
abbr		elseif ...
	elseif ${1:#:cond}
		${0:#:body}

snippet		if_expr
abbr		if then else
	if ${1:#:cond} then ${2:#:expr} else ${3:#:expr}

snippet		for
options		head
abbr		for ... end
	for ${1}
		${0:#:body}
	end

snippet		do_block
abbr		do || ... end
	do |${1:#:args}|
		${0:#:body}
	end

snippet		lambda_in
abbr		-> ... in
	-> ${1:#:args} in ${0:#:expr}

snippet		lambda_do
abbr		-> ... do
	-> ${1:#:args} do
		${0:#:body}
	end

snippet		let_in
abbr		let ... in
	let
		${1:#:inits}
	in ${0:#:expression}

snippet		let_begin
abbr		let ... begin ... end
	let
		${1:#:inits}
	begin
		${0:#:statements}
	end

snippet		main
options		head
abbr		func main end
	func main
		${0:#:start}
	end

snippet		main_args
options		head
abbr		func main end
	func main(args)
		${0:#:start}
	end

snippet		class
options		head
abbr		class...end
	class ${1:#:name}
		${0:#:body}
	end

snippet		init
options		head
abbr		init...end
	init${1:#:args}
			${0:#:body}
	end
