delete		func
snippet		func
abbr		func (){}
options		head
	func ${1:#:name}(${2:#:args}) ${3}{
		${0:#:BODY}
	}

snippet		func_method
abbr		func () ...(){}
options		head
	func (${1:self} ${2:#:receiver_type}) ${3:#:name}(${4:#:args}) ${5:#:return_type}{
		${0:#:BODY}
	}

snippet		main
abbr		package main ... func main...
options		head
alias		main_package
	package main
	
	func main() {
		${0:#:BODY}
	}

snippet		for
abbr		for _, v := range ...
options		head
	for ${1:_},${2:v} := range ${3:#:array} {
		${0:#:BODY}
	}

snippet		for_index
abbr		for ;; {}
options		head
	for ${1};${2};${3} {
		${0:#:BODY}
	}

snippet		struct
abbr		type ... struct
options		head
alias		type_struct
	type ${1:#:name} struct {
		${0:#:fields}
	}

snippet		interface
abbr		type ... interface
options		head
alias		type_interface
	type ${1:#:name} interface {
		${0:#:requirements}
	}

snippet		switch
options		head
abbr		switch {case ...: ...}
	switch ${1:#:target}{
	case ${2:#:case1}:
		${0}
	}

snippet		select
options		head
abbr		select {case ...: ...}
	select {
    case ${1:#:var} := <-${2:#:chan}:
		${0}
	}

snippet		defer_func
abbr		defer func(){}()
options		head
	defer func() {
		${0:#:BODY}
	}()

snippet		debug_print
options		head
abbr		fmt.Printf
	fmt.Printf("${1:#:expression}: %v\n", $1)

snippet		append
options		head
abbr		a = append(a, )
	${1:#:array} = append($1, ${0:#:args})

snippet		func_test
options		head
abbr		func TestFoo(...)
alias		func_test
	func Test${1:#:What}(t *testing.T) {
		${0:#:BODY}
	}

snippet		benchmark
options		head
abbr		func BenchmarkFoo(...)
alias		func_bench
	func Benchmark${1:#:What}(b *testing.B) {
		for i := 0; i < b.N; i++ {
			${0:#:BODY}
		}
	}

snippet		subtest_func
options		head
abbr		t.Run("", func(){})
	t.Run("${1:#:what}", func(t *testing.T) {
		${0:#:BODY}
	})

snippet		subbench_func
options		head
abbr		b.Run("", func(){})
	b.Run("${1:#:what}", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			${0:#:BODY}
		}
	})

snippet		testcases
options		head
abbr		testcase := ...
	testcases := []struct{
		what string
		${1:#:fields}
	} {
		{
			what: "${2:#:description}",
			${3:#:fields}
		},
	}
	for _,tc := range testcases {
		 t.Run(tc.what, func(t *testing.T) {
			${0:#:BODY}
		})
	}
