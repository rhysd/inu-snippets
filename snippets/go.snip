delete		func
snippet		func
abbr		func (){}
options		head
	func ${1:#:name}(${2:#:args}) ${3}{
		${0:#:BODY}
	}

snippet		method
abbr		func () ...(){}
options		head
alias		func_method
	func (${1:self} ${2:#:receiver_type}) ${3:#:name}(${4:#:args}) ${5:#:return_type}{
		${0:#:BODY}
	}

snippet		main
abbr		package main ... func main...
options		head
alias		main_package
	package main
	
	func main() {
		${0:#:BODY}
	}

snippet		for_range
abbr		for _, v := range ...
options		head
	for ${1:_},${2:v} := range ${3:#:array} {
		${0:#:BODY}
	}

snippet		for
abbr		for ;; {}
options		head
	for ${1};${2};${3} {
		${0:#:BODY}
	}

snippet		struct
abbr		type ... struct
options		head
alias		type_struct
	type ${1:#:name} struct {
		${0:#:fields}
	}

snippet		interface
abbr		type ... interface
options		head
alias		type_interface
	type ${1:#:name} interface {
		${0:#:requirements}
	}

snippet		switch
options		head
abbr		switch {case ...: ...}
	switch ${1:#:target}{
	case ${2:#:case1}:
		${0}
	}

snippet		select
options		head
abbr		select {case ...: ...}
	select {
    case ${1:#:var} := <-${2:#:chan}:
		${0}
	}

snippet		if_err_assign
options		head
abbr		if err := ...; err != nil { ...
	if err := ${1:#:expr}; err != nil {
		${0:panic(err)}
	}

snippet		if_err_not_nil
options		head
abbr		if err != nil
	if err != nil {
		${0:panic(err)}
	}

snippet		open_file
options		head
abbr		os.Open(...)
	${1:f}, err := os.${2:Open}(${3:#:filename}, ${4:os.ModePerm})
	if err != nil {
		${5:panic(err)}
	}
	defer $1.Close()
	${0}

snippet		defer_func
abbr	defer func(){}()
options		head
	defer func() {
		${0:#:BODY}
	}()

snippet		debug_print
options		head
abbr	fmt.Printf
	fmt.Printf("${1:#:expression}: %v\n", $1)
