delete		helloworld
delete		package

delete		func
snippet		func
abbr		func (){}
options		head
	func ${1:#:name}(${2:#:args}) ${3}{
		${0:#:BODY}
	}

snippet		method
abbr		func (*) ...(){}
alias		func_method
	func (${1:self} *${2:#:receiver_type}) ${3:#:name}(${4:#:args}) ${5:#:return_type}{
		${0:#:BODY}
	}

snippet		main
abbr		func main(){}
options		head
	func main() {
		${0:#:BODY}
	}

snippet		main_package
abbr		package main ... func main...
	package main
	
	func main() {
		${0:#:BODY}
	}

snippet		for_range
abbr		for _, v := range ...
options		head
	for _,${1:v} := range ${2:#:array} {
		${0:#:BODY}
	}

snippet		for_index_range
abbr		for i, v := range ...
options		head
	for ${1:i},${2:v} := range ${3:#:array} {
		${0:#:BODY}
	}

snippet		for
abbr		for ;; {}
options		head
	for ${1};${2};${3} {
		${0:#:BODY}
	}

snippet		struct
abbr		type ... struct
alias		type_struct
	type ${1:#:name} struct {
		${0:#:fields}
	}

snippet		interface
abbr		type ... interface
alias		type_interface
	type ${1:#:name} interface {
		${0:#:requirements}
	}

snippet		switch
abbr		switch {case ...: ...}
	switch ${1:#:target}{
	case ${2:#:case1}:
		${0}
	}

snippet		select
abbr		select {case ...: ...}
	select {
	case ${1:#:case1}:
		${0}
	}

snippet		err_with_check
abbr		foo, err := ...; if err ...
	err := ${1:#:expr}
	if err != nil {
		${0:#:error_handling}
	}

snippet		if_err
abbr		if err := ...; err != nil { ...
	if err := ${1:#:expr}; err != nil {
		${0:#:error_handling}
	}

