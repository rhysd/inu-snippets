delete		augroup
snippet		augroup
abbr		augroup ... augroup END
	augroup ${1}
		autocmd!
		autocmd ${0}
	augroup END

delete		cpo_save
snippet		cpo_save
options		head
abbr		use cpo save
	let s:save_cpo = &cpo
	set cpo&vim
	
	${0}
	
	let &cpo = s:save_cpo
	unlet s:save_cpo

delete		NeoBundle
snippet		NeoBundle
alias		neobundle
abbr		NeoBundle ''
	NeoBundle '`getreg('+')=='' ? '<\`1\`>' : getreg('+')`'${0}

delete		NeoBundleLazy
snippet		NeoBundleLazy
alias		neobundlelazy
abbr		NeoBundleLazy '' {}
	NeoBundleLazy '`getreg('+')=='' ? '<\`1\`>' : getreg('+')`', {
			\ ${0}
			\ }

snippet		NeoBundleLazy_autoload
alias		neobundlelazy_autoload
abbr		NeoBundleLazy '' {'autoload' : }
	NeoBundleLazy '`getreg('+')=='' ? '<\`1\`>' : getreg('+')`', {
			\ 'autoload' : {
			\     ${0}
			\   }
			\ }

delete		autoload_function
snippet		autoload_function
alias		afunc
abbr		auto#load#func()
	function! `substitute(matchstr(substitute(expand('%:p:r'), '\\', '/', 'g'), '\/autoload\/\zs.*\ze'), '/', '#', 'g')`#${1:func_name}(${2})
		${0}
	endfunction

snippet		filter
abbr		filter(copy(), )
	filter(copy(${1}), '${0}')

snippet		map
abbr		map(copy(), )
	map(copy(${1}), '${0}')

# these are merged in main stream
# snippet		save_pos
# options head
# abbr		use pos save
# 	let pos_save = getpos('.')
# 	${0}
# 	call setpos('.', pos_save)
# 
# snippet		save_register
# options head
# abbr		use register save
# 	let save_reg_$1 = getreg('${1}')
# 	let save_regtype_$1 = getregtype('$1')
# 	${0}
# 	call setreg('$1', save_reg_$1, save_regtype_$1)
# 
# snippet		save_option
# options head
# abbr		use option save
# 	let $1_save = &${1}
# 	let &$1 = ${2}
# 	${0}
# 	let &$1 = $1_save

delete		loaded
snippet		loaded
options		head
abbr		if exists(...) finish
	if (exists('g:loaded_`substitute(expand('%:t:r'), '\W', '_', 'g')`') && g:loaded_`substitute(expand('%:t:r'), '\W', '_', 'g')`) || &cp
		finish
	endif
	
	${0}
	
	let g:loaded_`substitute(expand('%:t:r'), '\W', '_', 'g')` = 1

snippet		if_oneline
abbr		if | | endif
options		word
	if ${1} | ${2} | endif${0}

snippet		if_else_oneline
abbr		if | | else | | endif
options		word
	if ${1} | ${2} | else | ${3} | endif${0}

snippet		prettyprint
abbr		echomsg PrettyPrint(...)
	echomsg PrettyPrint(${1})${0}

snippet		let_autoload_global_var
abbr		let g:foo#bar = get(...)
alias		let_agvar
options		head
	let g:`substitute(matchstr(neosnippet#util#expand('%:p:r'), '/autoload/\zs.*$'), '/', '#', 'g')`#${1:#:var_name} = get(g:, '`substitute(matchstr(neosnippet#util#expand('%:p:r'), '/autoload/\zs.*$'), '/', '#', 'g')`#$1', ${2:#:default})

snippet		let_global_var
abbr		let g:foo = get(...)
alias		let_gvar
options		head
	let g:${1:#:name} = get(g:, '$1', ${2:#:default})

snippet		let_var
abbr		let ... = get(...)
options		head
	let ${1:#:scope}:${2:#:name} = get($1:, '$2', ${3:#:default})

snippet		echohl
abbr		echohl | ... | echohl None
options		head
	echohl ${1:ErrorMsg} | ${2:echomsg} ${0:#:msg} | echohl None

delete		redir
snippet		redir_var
abbr		redir =>
	redir => ${1:#:var}
		${0}
	redir END

snippet		redir_file
abbr		redir >
	redir! > ${1:#:file}
		${0}
	redir END

snippet		redir_register
abbr		redir @
	redir @${1:#:register}
		${0}
	redir END
